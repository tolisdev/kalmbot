
module.exports = (session) => {
  const Store = session.Store 

  const noop = () => {}

  class DBDDataBaseStore extends Store {
    constructor(options) {
      super(options)
      if (!options.client) {
        throw new Error('A client must be directly provided')
      }

      if (!options.client.db) {
        throw new Error('client must be a dbd.db Collection')
      }

      this.collection = options.client
      this.prefix = "session:"
      this.cache = {}
      this.filter = {
        AS:"SESSIONS",
        FRAMEWORK:"EXPRESS",
        FOR:"STORE"
      }

      new Promise(async (resolve, reject) => {
        try {
				await this.loadSessions()
				resolve(true)
			} catch (err) {
				reject(err)
			}
      })
    }
    async loadSessions() {
      this.cache = (await this.collection.find(this.filter) || { data: {}}).data
    }

    touch(sid, session, done = noop) {
      try {
       const data = this.cache[this.prefix+sid]

      if ((data.expire - this._getTTL(session)) < 1) {
        delete this.cache[this.prefix+sid]
        return done(null, "EXPIRED")
      }
      return done(null, "OK")
      } catch (error) {
        return done(error)
      }
    }

    all(done) {
      try {
        const keys = Object.keys
      } catch(error) {
        return done(error)
      }
    }

    _getTTL(session) {
      let ttl
      if (session && session.cookie && session.cookie.expires) {
        let ms = Number(new Date(session.cookie.expires)) - Date.now()
        ttl = Math.ceil(ms / 1000)
      } else {
        ttl = 0
      }
      return ttl
    }
  } 
}