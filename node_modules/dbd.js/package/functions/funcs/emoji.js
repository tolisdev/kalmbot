const ms = require('parse-ms');
const moment = require("moment");

module.exports = async d => {
    let code = d.command.code

    let r = code.split("$emoji[").length - 1

    let inside = code.split("$emoji[")[r].split("]")[0]

    let fields = inside.split(";")
  
    let result = fields[1]

  let emote;
   try {
   emote = await d.message.guild.emojis.cache.get(fields[0])
   if(!emote && (result === "isdeleted")) result = true
   else if (!emote) return d.error(`:x: Invalid emoji ID in 1st field of \`$emoji[${inside}]\``)
  } catch {
    return d.error(`:x: Invalid emoji ID in 1st field of \`$emoji[${inside}]\``)
 }

 if(!result) return d.error(`:x: Missing option in 2nd field of \`$emoji[${inside}]\``)
 if(![
    "created",
    "emoji",
    "guildid",
    "id",
    "identifier",
    "isanimated",
    "isdeleted",
    "ismanaged",
    "name",
    "url"
].includes(result.toLowerCase())) return d.error(`:x: Invalid option in 2nd field of \`$emoji[${inside}]\``)

 switch(result) {
    case "id":
     try {
         result = emote.id
        } catch {
          result = undefined
       }
    break;
    case "emoji":
     try {
         result = emote.toString()
        } catch {
          result = undefined
       }
    break;
    case "isanimated":
     try {
         result = emote.animated
        } catch {
          result = undefined
       }
    break;
    case "name":
     try {
         result = emote.name
        } catch {
          result = undefined
       }
    break;
    case "url":
     try {
         result = emote.url
        } catch {
            result = undefined
       }
    break;
    case "isdeleted":
        try {
         result = emote.deleted
        } catch {
           result = undefined
        }
    break;
    case "created":
        try {
         result = moment(emote.createdAt).format("LLLL")
        } catch {
           result = undefined
        }
    break;
    case "identifier":
        try {
         result = emote.identifier
        } catch {
           result = undefined
        }
    break;
    case "guildid":
        try {
         result = emote.guild
        } catch {
           result = undefined
        }
    break;
    case "ismanaged":
        try {
         result = emote.managed
        } catch {
           result = undefined
        }
 }
 

    return {
        code: code.replaceLast(`$emoji[${inside}]`, result)
    }
}