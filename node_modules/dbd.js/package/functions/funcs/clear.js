module.exports = async d => {
	const code = d.command.code

	const r = code.split("$clear[").length - 1

	const inside = code.split("$clear[")[r].split("]")[0]

	const [
		amount,
		filter = "everyone",
		channelID = d.message.channel.id,
		retucnCount = "no"
	] = inside.split(";")

	const channel = d.message.guild.channels.cache.get(channelID)

	if (!channel) return d.error(`:x: Invalid channel ID in \`$clear[${inside}]\``)

	if (filter === "everyone" && Number(amount) > 100) {
		//clear handler 
		let input = Number(amount)
		let deleteds = 0

		while (input > 0) {
			const data = Math.min(input, 100)

			input -= data

			const messages = await channel.messages.fetch({ limit: data }).catch(err => null)

			if (!messages) return d.error(':x: Failed to fetch messages')

			if (messages.size <= 0) break

			const deleted = await channel.bulkDelete(messages, true).catch(err => null)

			if (!deleted) return d.error(`:x: Failed to delete messages`)

			if (deleted.size <= 0) break

			deleteds += deleted.size

			if (input > 0) await new Promise(resolve => setTimeout(resolve, 3500))
		}

		return {
			code: code.replaceLast(`$clear[${inside}]`, returnCound === "yes" ? deleteds : '')
		}
	}

	const messages = await channel.messages.fetch({
		limit: Number(amount),
		cache: false
	}).catch(err => null)

	if (!messages) return d.error(`:x: Failed to fetch messages!`)

	const deleted = await channel.bulkDelete(messages.filter(m => filter === "everyone" ? true : filter === m.author.id).map(m => m.id), true).catch(Err => null)

	if (!deleted) return d.error(`:x: Failed to delete messages!`)

	return {
		code: code.replaceLast(`$clear[${inside}]`, "")
	}

}