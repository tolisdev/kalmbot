const moment = require("moment")
const ms = require("parse-ms")

module.exports = async d => {
    let code = d.command.code

    let r = code.split("$user[").length - 1
    
    let inside = code.split("$user[")[r].split("]")[0]
 
    let [id, option] = inside.split(";")
    
    let user = d.client.users.cache.get(id) || d.message.author.id
    
    if (!user) return d.error(`:x: Invalid user ID in 1st field of \`$user[${inside}]\`.`)

 let ch = d.message.channel.id;
 let result = option.toLowerCase();

 if(!result) return d.error(`:x: Missing option in 2nd field of \`$user[${inside}]\`.`)
 if(![
    "avatar",
    "created",
    "discrim",
    "id",
    "isbot",
    "istyping",
    "lastmessagechannelid",
    "lastmessageid",
    "mention",
    "name",
    "tag",
    "timestamp"
].includes(result.toLowerCase())) return d.error(`:x: Invalid option in 2nd field of \`$user[${inside}]\`.`)

switch(result) {
        case "avatar":
        result = user.displayAvatarURL(id) || undefined
    break;
        case "created":
        result = moment(user.createdAt).format("LLLL") || undefined
    break;
        case "discrim":
        result = user.discriminator || undefined
    break;
        case "id":
        result = user.id || undefined
    break;
        case "isbot":
        result = user.bot
    break;
        case "istyping":
        result = user.typingIn(ch) || false
    break;
        case "lastmessagechannelid":
        result = user.lastMessageChannelID || undefined
    break;
        case "lastmessageid":
        result = user.lastMessageID || undefined
    break;
        case "mention":
        result = user.toString(id) || undefined
    break;
        case "name":
        result = user.username || undefined
    break;
        case "tag":
        result = user.tag || undefined
    break;
        case "timestamp":
            result = Object.entries(ms(Date.now() - user.createdTimestamp)).map((x,y)=> {
                if (x[1] > 0 && y < 4) return `${x[1]} ${x[0]}`
            }).filter(x => x).join(", ")
            if(!result) result = undefined
            break;
            
    default: undefined
}
   
return {
    code: code.replaceLast(`$user[${inside}]`, result)
}
}
