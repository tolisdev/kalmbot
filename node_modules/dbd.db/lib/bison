/**
 * Split array
 * @param {[]} array The array to split
 * @param {!Number} [pages] array to split every pages
 */
async function splitArray(array, pages = 2) {
	if (!array.length) return []

	const len = Math.ceil(array.length / pages)
	const chunks = new Array(len)

	let i = 0
	let c = 0

	while (i < len) {
		chunks[i++] = array.slice(c, c += pages)
	}

	return chunks
}

/**
 * Encode strings
 * @param {string} string The string to encode
 */
async function encode(string) {
	const b64 = Buffer.from(string).toString('base64')

	let enc = ''

	let l = 0

	while (l < b64.length) {
		const str = b64.substr(l, 120)

		let codes = []
		let i = 0

		while (i < str.length) {
			const strng = str.substr(i, 2)

			const first = (strng.charCodeAt(0)) - 33
			const second = (strng.charCodeAt(1) || 93) - 33

			codes.push(`${first}${second}`)

			i += 2
		}

		l += 120

		enc += String.fromCharCode(...codes)

		if (l < b64.length) enc += '\n'
	}

	return enc
}

/**
 * Decode strings
 * @param {string} string The string to Decode
 */
async function decode(string) {
  if (!string.length) return ''
  
  const strings = string.replace(/\n/g, '')

  let b64 = ''
  
  let l = 0
  
  while (l < strings.length) {
	const str = strings.substr(l, 128)

	let codes = []
	let i = 0

	while (i < str.length) {
		const code = `${str[i].charCodeAt(0)}`

		const first = 1 * code.substr(0, 2) + 33
		const second = 1 * code.substr(2) + 33

		codes.push(first)

		if (second != 93) codes.push(second)

		i++
	}

	b64 += String.fromCharCode(...codes)

	l += 128
  }
  
  const decoded = Buffer.from(b64, 'base64')
  
  return decoded.toString()
}

module.exports = {
  splitArray,
  encode,
  decode
}